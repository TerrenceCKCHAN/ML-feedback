varying mat4 mvMatrix;
varying mat4 pMatrix;
varying mat3 nMatrix;
varying vec3 normalInterpolation;
varying vec3 vertexPosition;
varying float seedX;
float ka  = 0.3;
float kd  = 0.6;
float ks  = 0.9;
float shininess = 30.0;
vec3 ambientColour;
vec3 diffuseColour;
vec3 specularColour;


float rnd(float seed) {
    seed = (mod(seed * 1364.0 + 626.0, 509.0));
    return seed / 509.0;
}

float change_sign(float seed) {
    if (rnd(seed + 10.0) > 0.5) {
        return -rnd(seed);
    }
    return rnd(seed);
}


void main() {
    ambientColour = vec3(rnd(rnd(seedX)),rnd(seedX), rnd(rnd(rnd(seedX))));
    diffuseColour = vec3(rnd(seedX),rnd(rnd(rnd(seedX))), rnd(rnd(seedX)));
    specularColour = vec3(1,1,1);


    vec4 lightPosition = vec4(10.0 * change_sign(seedX),5.0 * rnd(seedX + 1.0),10.0 + 5.0*rnd(seedX),0);
    vec4 lPos_camSpace = pMatrix * mvMatrix * lightPosition;
    vec4 fragPos_camSpace = pMatrix * mvMatrix * gl_FragCoord;
    // Diffuse Component
    vec3 l = normalize(vec3(lightPosition) - vec3(vertexPosition));
    vec3 n = normalize(normalInterpolation);
    float nDotL = max(0.0, dot(n,l));
    // Specular Component
    vec3 r = reflect(-l, n);
    vec3 v = -vertexPosition;
    float rDotV = max(0.0, dot(r, v));
    
    
    gl_FragColor = 
    vec4(
    ka * ambientColour + 
    kd * nDotL * diffuseColour +
    ks * pow(rDotV, shininess) * specularColour
    , 1.0);
}