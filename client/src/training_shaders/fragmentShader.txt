varying mat4 mvMatrix;
varying mat4 pMatrix;
varying mat3 nMatrix;
varying vec3 normalInterpolation;
varying vec3 vertexPosition;
float ka  = 0.3;
float kd  = 0.6;
float ks  = 0.9;
float shininess = 30.0;
vec3 ambientColour = vec3(0,1,0);
vec3 diffuseColour = vec3(0,1,0);
vec3 specularColour = vec3(1,1,1);

void main() {
    vec4 lightPosition = vec4(5,3,6,0);
    vec4 lPos_camSpace = pMatrix * mvMatrix * lightPosition;
    vec4 fragPos_camSpace = pMatrix * mvMatrix * gl_FragCoord;

    // Diffuse Component
    vec3 l = normalize(vec3(lightPosition) - vec3(vertexPosition));
    vec3 n = normalize(normalInterpolation);
    float nDotL = max(0.0, dot(n,l));

    // Specular Component
    vec3 r = reflect(-l, n);
    vec3 v = normalize(-vertexPosition);
    float rDotV = max(0.0, dot(r, v));
    
    
    gl_FragColor = 
    vec4(
    ka * ambientColour + 
    kd * nDotL * diffuseColour +
    ks * pow(rDotV, shininess) * specularColour
    , 1.0);
}