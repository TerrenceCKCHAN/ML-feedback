VertexShader and FragmentShader are the skeleton of the working phong shading model

vertexShader and fragmentShader 0 are used to generate the ground truth for the phong shading model:
Alternating colour and controlled variation of light positions. 
Note that the random function is not entirely random but determined by the input seed

vertexShader and fragmentShader 1 are in class 1 -> 
normalInterpolation(n) is not normalized before calculation of n dot l

vertexShader and fragmentShader 2 are in class 2 ->
No specular component

vertexShader and fragmentShader 3 are in class 3 ->
No diffuse component

fragmentShader 4 ->
Did not normalize the lightVector(l) before n dot l

fragmentShader 5 ->
reflect(-l, n) becomes reflect(l, n)

!! omitted !!
fragmentShader 6 ->
vec3 v = normalize(-vertexPosition) becomes normalize(vertexPosition)

fragmentShader 7 ->
vec3 v = normalize(-vertexPosition) becomes -vertexPosition

fragmentShader 8 -> switch pow rDotV and nDotL
gl_FragColor = 
vec4(
ka * ambientColour + 
kd * pow(rDotV, shininess) * diffuseColour +
ks * nDotL * specularColour
, 1.0);

fragmentShader 9 -> invert ambientColour and fragmentColour
gl_FragColor = 
vec4(
ka * specularColour + 
kd * nDotL * diffuseColour +
ks * pow(rDotV, shininess) * ambientColour
, 1.0);


#Extend
No Ambient,
wrong diffuse (n dot l)
wrong specular (r dot v)
light in shadow
wrong perspective (Maybe)